// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc862.Sirius.subsystems;

import com.ctre.phoenix.motorcontrol.ControlMode;
import org.usfirst.frc862.Sirius.RobotMap;
import org.usfirst.frc862.Sirius.commands.*;
import edu.wpi.first.wpilibj.command.Subsystem;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import edu.wpi.first.wpilibj.DoubleSolenoid;

import static com.ctre.phoenix.motorcontrol.ControlMode.PercentOutput;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class Shooter extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final WPI_TalonSRX leftFly = RobotMap.shooterLeftFly;
    private final WPI_TalonSRX rightFly = RobotMap.shooterRightFly;
    private final DoubleSolenoid doubleSolenoid1 = RobotMap.shooterDoubleSolenoid1;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());

    	leftFly.set(0);
    	rightFly.set(0);
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop

    }

    public void startFlyWheels() {
        leftFly.set(0.75);
        rightFly.set(-0.75);
    }
    
    public void intakeFlyWheels() {
    	leftFly.set(-0.4);
    	rightFly.set(0);
    }

    public void stopFlyWheels() {
    	leftFly.set(0);
    	rightFly.set(0);
    }

    public void unkick() {
        doubleSolenoid1.set(DoubleSolenoid.Value.kReverse);
    }

    public void kick() {
        doubleSolenoid1.set(DoubleSolenoid.Value.kForward);
    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}

